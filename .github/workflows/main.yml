# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      matrix:
        targetplatform: [x86, x64]
  
    # The type of runner that the job will run on
    runs-on: windows-latest
    
    env:
        Solution_Path: GoProCSharpDev.sln
        Wpf_Project_Path: GoProCSharpDev.csproj
     
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      env:
         ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      with:
        dotnet-version: 3.1.100

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.0
      env:
         ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
         
    # restore the application while passing in the RuntimeIdentifier parameter in order to populate the obj folder with the appropriate platform dependencies for use during build.
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: Debug
        RuntimeIdentifier: win-${{ matrix.targetplatform }}
        
      # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: MSIX Package
        path: GoProCSharpDev.Package\AppPackages\   
         
 
      

